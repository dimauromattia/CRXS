/*! \mainpage Documentation of the CRXS Tools
 *
 * \section intro_sec Introduction
 * 
 * This software package is developed to easily calculate cross sections (XS) for the
 * production of antiprotons and antideuteron as required in cosmic-ray (CR) physics.
 * The package is based on c++ and builds all functions into a library. Furthermore,
 * it provides an interface to python.
 *
 * This software package provides:
 *  - different CR parametrizations of the Lorentz invariant XSs
 *  - functions to transform the XSs to the ISM (LAB) frame
 *  - functions to transform the XSs to the energy-differential XS (i.e. integrate over all angles)
 *
 *
 *
 * \section install_sec Installation
 *
 * \subsection step1 Step 1: Prerequisits
 *
 *   - gsl
 *   - cmake
 *   - swig     (optional)
 *   - python 2 (optional)
 *   - python 3 (optional)
 *
 *   If you install the python package make sure your python version
 *   contains the following packages:
 *   * numpy
 *   * scipy
 *   * matplotlib
 *
 *
 * \subsection step2 Step 2: Get Software
 *
 *  The software is available as git repository on gitHub. To download it into the folder <MySoftwareDirectory> type:
 *
 *  \code
 *  $ git <a href="https://github.com/korsmeier/CRXS.git"> https://github.com/korsmeier/CRXS.git </a> <MySoftwareDirectory>
 *  \endcode
 *
 *  \subsection step3 Step 3: Build software
 *
 *
 *  The c++ library is build with cmake and the python interface is created by swig.
 *  All commands to build the software are summarised in the Makefile. If you want
 *  to build everything, simply use
 *
 *  \code
 *  $ make
 *  \endcode
 *
 *  Otherwise you can use the options:
 *  1. build, to build only the c++ library
 *  2. example, to build the example.cpp which links to the CRXS library
 *  3. debug, to build the c++ library with debug symbols
 *
 *  If you want to build only the python 2 or 3 use:
 *
 *  \code
 *  $ make build
 *  $ make python
 *  \endcode
 *
 *  or
 *
 *  \code
 *  $ make build
 *  $ make python_three
 *  \endcode
 *
 *  To uninstall everything use
 *
 *  \code
 *  $ make clean
 *  \endcode
 *
 *
 *  If you want to link the python package to your site path use the
 *  script
 *
 *  \code
 *  $ ./link_python_package.sh
 *  \endcode
 *
 *  and follow the instruction. You have to specify your site path manuelly.
 *  To find out your path you may need the command (python -m site).
 *
 *  
 *  If you do not want to link the package to your python version you have
 *  to create a symbolic link of the py2 or py3 directory in the directory
 *  where you want to use the package.
 *  
 *  \code
 *  $ ln -s PATH_TO_CRXS/py2 CRXS
 *  \endcode
 *  
 *  To include the package use
 *  
 *  \code
 *  import CRXS.XS_wrapper
 *  import CRXS.XS_tools
 *  \endcode
 *  
 *
 *
 *  \subsection step4 Step 4: Build project (optional)
 *
 *
 *  On a Mac with Xcode you may build a project by
 *   1. creating a folder in the directory cpp (e.g. xcode) and change into this new directory. Then type
 *   2. \code $ cmake -G Xcode .. \endcode
 *
 *  Now you are ready to start!
 *
 *
 *
 *   \section License
 *
 *    This package has been developed during the preparation of three papers.
 *    Please cite those papers if you use the results of this package.
 *
 *       - 10.1103/PhysRevD.97.103019, arXiv:1802.03030 (for antiprotons)
 *       - 10.1103/PhysRevD.96.043007, arXiv:1704.03663 (for antiprotons)
 *       - 10.1103/PhysRevD.97.103011, arXiv:1711.08465 (for antinuclei )
 *
 *    More details are given in the LICENSE file.
 *
 *  \section Examples
 *
 *  The are stored in the folder examples
 *
 *
 *  - example.cpp <br>
 *   You can build this with: <br>
 *   \code $ make example \endcode
 *   It creates the executable example in the examples directory.<br>
 *  <br>
 *  - example__xs_tools.py
 *  - example__xs_wrapper.py
 *
 *  There are some examples which show how the software and access to individual fuctions works.
 *  Note that some functions are available in XS_tools.py as well as in XS_wrapper. The difference
 *  is that the functions in XS_wrapper are completly based on c++ and interfaced at the very end.
 *  This results in the best performance. The functions of XS_tools are partly written in python,
 *  which allows easy modification but has a worse performance.
 *
 *
 */
